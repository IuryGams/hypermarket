import { real } from "../utils/Real";
import splitNumber from "../utils/splitNumber";

// Algoritmo que retorna o menor n√∫mero de cedulas e moedas possiveis para o troco X.
export default function AlgoritmoNotas(troco: number) {
    
    let [numInt, numDecimal] = splitNumber(troco); // Utilizo a destrutura√ß√£o para salvar os retornos da fun√ß√£o splitNumber que retorna um n√∫mero inteiro e decimal.

    // Interando sobre cada valor do real e retornando uma nova lista. 
    return real.reduce((arrayInitial: string[], coin: number) => {

        if (numInt >= coin && numInt >= 1) { // Verificando se o n√∫mero inteiro for maior que o valor da intera√ß√£o e maior ou igual a 1.
            
            const qtyCash = Math.trunc(numInt / coin); // Dividindo o n√∫mero inteiro pelo valor da intera√ß√£o, transformando-o em um n√∫mero inteiro com o metodo Math.Trunc() e salvando o quociente na constante.
            
            numInt %= coin; // Atribuindo o restante da divis√£o a o n√∫mero Inteiro.
            
            arrayInitial.push(`${qtyCash} ${qtyCash > 1 ? "notas" : "nota"} de ${coin} ${coin > 1 ? "reais." : "real."}`) // Adicionando a instru√ß√£o a lista. 
        };

        if (numDecimal >= coin && numDecimal < 1) { // Verificando se o n√∫mero Decimal for maior que o valor da intera√ß√£o e menor do que 1.
            
            const qtyCoin = Math.trunc(numDecimal / coin); // Dividindo o n√∫mero decimal pelo valor da intera√ß√£o, transformando-o em um n√∫mero inteiro com o metodo Math.Trunc() e salvando o quociente na constante.
            
            numDecimal %= coin; // Atribuindo o restante da divis√£o a o n√∫mero Decimal.
            const coinToInt = Math.round(coin * 100);
            arrayInitial.push(`${qtyCoin} ${qtyCoin > 1 ? "moedas" : "moeda"} de ${coinToInt} ${coinToInt > 1 ? "centavos." : "centavo."}`); // Adicionando a instru√ß√£o a lista.
        };

        return arrayInitial
    }, []);

    // N√£o foi utilizado o m√©todo Map. Pois, seria necess√°rio utilizar o m√©todo filter em seguida para retornar apenas os valores que necessito. Al√©m de piorar a performace por se tratar de 2 loops.
    // Utilizando o m√©todo Reduce podemos simular o m√©todo MAP e FILTER retornando apenas o valor que necessito com apenas 1 loop. üòä
}